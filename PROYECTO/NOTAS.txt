class SSHShellUI:
    def __init__(self, master):
        self.master = master

        self.text_area = scrolledtext.ScrolledText(master, wrap=tk.WORD, width=80, height=20, bg="black", foreground="green")
        self.text_area.pack(expand=True, fill="both")

        self.etiqueta = tk.Label(master, text="Ingresar comando", foreground="white", background="black", font=("Arial", 10))
        self.etiqueta.pack(side="left", padx=5, pady=5)

        self.entry = tk.Entry(master, width=80, font=("Arial", 10), bg="white", foreground="black")
        self.entry.pack(side="left", padx=5, pady=5)

        self.clear_button = tk.Button(master, text="Limpiar OutPut", command=self.limpiar_texto, font=("Arial", 10))
        self.clear_button.pack(side="left", padx=5, pady=5)

        self.entry.bind("<Return>", self.enviar_comando)  # Asociar la tecla Enter a la función enviar_comando

        self.ssh = self.iniciar_sesion_ssh()  # Iniciar la sesión SSH al inicializar la clase

    def iniciar_sesion_ssh(self):
        try:
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect('192.168.1.49', port=22, username='kali', password='kali')
            self.text_area.insert(tk.END, "Conexión SSH establecida.\n", "output")
            return ssh_client
        except Exception as e:
            self.text_area.insert(tk.END, f"Error al establecer conexión SSH: {e}\n")
            return None

    def ejecutar_comando_interactivo(self, comando):
        try:
            if self.ssh:
                # Abrir un canal "shell" interactivo
                channel = self.ssh.invoke_shell()

                # Enviar el comando
                channel.send(comando + '\n')

                # Esperar a que el comando termine
                while not channel.recv_ready():
                    pass

                # Recibir y mostrar la salida del comando
                output = channel.recv(1024).decode()
                while output:
                    self.text_area.insert(tk.END, output)
                    self.text_area.yview(tk.END)
                    self.text_area.update_idletasks()
                    output = channel.recv(1024).decode()

                # Cerrar el canal
                channel.close()

        except Exception as e:
            self.text_area.insert(tk.END, f"Error al ejecutar comando: {e}\n")

    def enviar_comando(self, event):
        comando_usuario = self.entry.get()
        if comando_usuario.lower() == 'exit':
            self.cerrar_sesion_ssh()
            self.master.destroy()
            return

        self.ejecutar_comando_interactivo(comando_usuario)
        self.entry.delete(0, tk.END)

    def cerrar_sesion_ssh(self):
        try:
            if self.ssh is not None and self.ssh.get_transport().is_active():
                self.ssh.close()
        except Exception as e:
            print(f"Error al cerrar la sesión SSH: {e}")

    def limpiar_texto(self):
        self.text_area.delete(1.0, tk.END)